TestCase subclass: #AnswerTest	instanceVariableNames: 'answer'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!AnswerTest methodsFor: 'setup' stamp: 'AlejoPugliese 5/30/2021 14:43'!setUp	answer := Answer newWithDescription: 'An answer' user: User new question: Question new.! !!AnswerTest methodsFor: 'testing'!testPositiveVotes	answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.	! !!AnswerTest methodsFor: 'testing'!testNegativeVotes			answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 1.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing'!testVotesForNewAnswer	self assert: (answer negativeVotes size) equals: 0.	self assert: (answer positiveVotes size) equals: 0.		! !!AnswerTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 0.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 2.		self assert: answer votes size equals: 4.! !TestCase subclass: #QuestionRetrieverTest	instanceVariableNames: 'cuoora socialRetriever topicsRetriever newsRetriever popularTodayRetriever user1 user2 user3 topicOO1 topicOO2 questionUser1TopicOO1 questionUser3TopicOO2 questionUser2TopicOO2 question2User3TopicOO2'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionRetrieverTest methodsFor: 'testing'!popularTodayTwoLikesFourQuestionsAtLeastOneVote	   "2 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user2 likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFourQuestionsAtLeastOneVote	  "1 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 := Question newWithTitle: 'Which refactoring should...' description: '' user: user3 topic: topicOO2.  cuoora addQuestion: question2User3TopicOO2 forUser: user3.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFourLikesFourQuestionsAtLeastOneVote	  "4 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user1 likesPublication: question2User3TopicOO2).  question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFiveLikesFourQuestionsAtLeastOneVote  "5 likes / 4 preguntas // preguntas con mas de 1 voto"question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user1) first equals: question2User3TopicOO2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 0.  15 timesRepeat: [ questionUser1TopicOO1 addVote: (Vote user: User new likesPublication: questionUser1TopicOO1) ].  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) first equals: questionUser1TopicOO1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) first equals: questionUser1TopicOO1! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayNoLikesTwoQuestions	self		assert: (popularTodayRetriever retrieveQuestions: user1) size		equals: 1.	"0 likes / 2 preguntas "	self		assert: (popularTodayRetriever retrieveQuestions: user1) last		equals: questionUser3TopicOO2.	self		assert: (popularTodayRetriever retrieveQuestions: user2) size		equals: 2.	self		assert: (popularTodayRetriever retrieveQuestions: user3) size		equals: 1.	self		assert: (popularTodayRetriever retrieveQuestions: user3) last		equals: questionUser1TopicOO1! !!QuestionRetrieverTest methodsFor: 'testing'!testTopicsRetrieveQuestions  | questionUser2TopicOO2 |  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 0.  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) first equals: questionUser2TopicOO2.  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0! !!QuestionRetrieverTest methodsFor: 'testing'!testNewsRetrieveQuestions	| questionUser2TopicOO2 |	self assert: (newsRetriever retrieveQuestions: user1) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user1) last equals: questionUser3TopicOO2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user3) last equals: questionUser1TopicOO1.		questionUser2TopicOO2 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser: user2.		self assert: (newsRetriever retrieveQuestions: user1) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 2.! !!QuestionRetrieverTest methodsFor: 'testing'!testSocialRetrieveQuestions	| questionUser2TopicOO2 |		self assert: (socialRetriever retrieveQuestions: user1) size equals: 1.	self assert: (socialRetriever retrieveQuestions: user1) first equals: questionUser3TopicOO2.		self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.		questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.	questionUser2TopicOO2 addVote: (Vote user: user2 dislikesPublication: questionUser2TopicOO2).	cuoora addQuestion: questionUser2TopicOO2 forUser:user2.		self assert: (socialRetriever retrieveQuestions: user1) size equals: 2.	self assert: (socialRetriever retrieveQuestions: user1) last equals: questionUser2TopicOO2.		self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.				! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayNoLikesThreeQuestions  "0 likes / 3 preguntas "  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 2! !!QuestionRetrieverTest methodsFor: 'testing'!testPopularTodayRetrieveQuestions  self     popularTodayNoLikesTwoQuestions;     popularTodayNoLikesThreeQuestions;     popularTodayAtLeastOneVote;     popularTodayFourQuestionsAtLeastOneVote;     popularTodayTwoLikesFourQuestionsAtLeastOneVote;     popularTodayFourLikesFourQuestionsAtLeastOneVote;     popularTodayFiveLikesFourQuestionsAtLeastOneVote! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayAtLeastOneVote   "1 likes / 2 preguntas // preguntas con al menos 1 voto"  questionUser2TopicOO2 addVote: (Vote user: user3 likesPublication: questionUser2TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1! !!QuestionRetrieverTest methodsFor: 'set up' stamp: 'AlejoPugliese 5/30/2021 14:40'!setUp	user1 := User new.	user2 := User new.	user3 := User new.	user1		follow: user2;		follow: user3.	topicOO1 := Topic		name: 'OO1'		description: 'This topic is for discussing about OO1 issues'.	topicOO2 := Topic		name: 'OO2'		description: 'This topic is for discussing about OO2 issues'.	user1 addTopic: topicOO1.	user2 addTopic: topicOO2.	user3 addTopic: topicOO2.	cuoora := CuOOra new.	cuoora		addUser: user1;		addUser: user2;		addUser: user3.	questionUser1TopicOO1 := Question		newWithTitle: 'How to create a class in Pharo'		description: ''		user: user1		topic: topicOO1.	questionUser3TopicOO2 := Question		newWithTitle: 'How to create a WAComponent for...'		description: ''		user: user3		topic: topicOO2.	cuoora addQuestion: questionUser1TopicOO1 forUser: user1.	cuoora addQuestion: questionUser3TopicOO2 forUser: user3.	socialRetriever := SocialRetriever new: cuoora.	topicsRetriever := TopicsRetriever new: cuoora.	newsRetriever := NewsRetriever new: cuoora .	popularTodayRetriever := PopularRetriever new: cuoora.		! !TestCase subclass: #QuestionTest	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionTest methodsFor: 'setup'!setUp	question := Question  newWithTitle: 'Question  title' description: 'Question description' user: (User new) ! !!QuestionTest methodsFor: 'testing'!testPositiveVotes	question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 2.	! !!QuestionTest methodsFor: 'testing'!testNegativeVotes			question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 2.! !!QuestionTest methodsFor: 'testing'!testVotesForNewQuestion	self assert: (question negativeVotes size) equals: 0.	self assert: (question positiveVotes size) equals: 0.		! !!QuestionTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question positiveVotes size) equals: 0.	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.	self assert: (question negativeVotes size) equals: 1.		self assert: question votes size equals: 2.! !Object subclass: #CuOOra	instanceVariableNames: 'users topics questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!CuOOra methodsFor: 'adding'!addQuestion: aQuestion	questions add: aQuestion! !!CuOOra methodsFor: 'adding'!addUser: aUser	users add: aUser ! !!CuOOra methodsFor: 'adding'!addTopic: aTopic	topics add: aTopic ! !!CuOOra methodsFor: 'adding' stamp: 'AlejoPugliese 5/4/2021 00:25'!addQuestion: aQuestion forUser: aUser	aUser addQuestion: aQuestion.	self addQuestion: aQuestion! !!CuOOra methodsFor: 'initialize'!initialize	users := OrderedCollection new.	topics := OrderedCollection new.	questions := OrderedCollection new! !!CuOOra methodsFor: 'accessing'!users	^ users! !!CuOOra methodsFor: 'accessing'!topics	^ topics! !!CuOOra methodsFor: 'accessing'!questions	^ questions! !!CuOOra methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/17/2021 22:06'!positiveVotes	^questions sum: [ :q | q positiveVotes size ]! !!CuOOra methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/30/2021 13:51'!popularToday	^ self todayQuestions		select: [ :q | q positiveVotes size >= self averageVotes ]! !!CuOOra methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/17/2021 22:06'!todayQuestions	^questions select: [ :q | q timestamp asDate = Date today ]! !!CuOOra methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/30/2021 15:56'!averageVotes	^ self positiveVotes / self todayQuestions  size! !Object subclass: #Post	instanceVariableNames: 'timestamp user votes description'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Post methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:43'!newWithDescription: aDescription user: aUser	votes := OrderedCollection new.	timestamp := DateAndTime now.	description := aDescription.	user := aUser.	^ self! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 00:48'!description	^ description! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 00:48'!timestamp	^ timestamp! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/31/2021 10:15'!positiveVotesSize	^ self positiveVotes size! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 00:48'!votes	^ votes! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 00:48'!user	^ user! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/31/2021 10:15'!positiveVotes	^ votes select: [ :vote | vote isLike ]! !!Post methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 20:58'!negativeVotes		^votes		reject: [ :vote | 			vote isLike				 ].	! !!Post methodsFor: 'adding' stamp: 'AlejoPugliese 5/4/2021 00:48'!addVote: aVote	votes add: aVote! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Post class	instanceVariableNames: ''!!Post class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:48'!newWithDescription: aDescription user: aUser	^ self new newWithDescription: aDescription user: aUser! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Answer methodsFor: 'testing' stamp: 'AlejoPugliese 5/14/2021 12:11'!isTopAnswer	^ self positiveVotes >=  ((question sum: [:answer | answer positiveVotes size ]) / question answer size) ! !!Answer methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:44'!newWithQuestion: aQuestion	question := aQuestion.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 22:00'!newWithDescription: anAnswer user: aUser question: aQuestion	^ self new		newWithDescription: anAnswer user: aUser;		newWithQuestion: aQuestion; yourself! !Post subclass: #Question	instanceVariableNames: 'title answers topics'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Question methodsFor: 'adding'!addTopic: aTopic	topics add: aTopic.	aTopic addQuestion: self.! !!Question methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 00:48'!topics	^topics ! !!Question methodsFor: 'accessing'!title	^title ! !!Question methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:44'!newWithTitle: aTitle	answers := OrderedCollection new.	topics := OrderedCollection new.	title := aTitle.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:59'!newWithTitle: aTitle description: aDescription user: aUser	^ self new		newWithDescription: aDescription user: aUser;		newWithTitle: aTitle; yourself! !!Question class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/17/2021 21:59'!newWithTitle: aTitle description: aDescription user: aUser topic: aTopic	^ self new		newWithDescription: aDescription user: aUser;		newWithTitle: aTitle;		addTopic: aTopic; yourself! !Object subclass: #QuestionRetriever	instanceVariableNames: 'cuoora'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!QuestionRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:47'!returnRetrieveQuestions: aUser^self subclassResponsibility ! !!QuestionRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:59'!retrieveQuestions: aUser	^ (((self returnRetrieveQuestions: aUser)		asSortedCollection: [ :a :b | a positiveVotesSize > b positiveVotesSize ])		last: (100 min: (self returnRetrieveQuestions: aUser) size))		reject: [ :q | q user = aUser ]! !!QuestionRetriever methodsFor: 'accessing' stamp: 'AlejoPugliese 5/6/2021 21:47'!initialize: aCuooraInstance	cuoora := aCuooraInstance! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionRetriever class	instanceVariableNames: ''!!QuestionRetriever class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/6/2021 21:47'!new: cuoora	^ self new initialize: cuoora! !QuestionRetriever subclass: #NewsRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!NewsRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:48'!returnRetrieveQuestions: aUser	^ cuoora todayQuestions ! !QuestionRetriever subclass: #PopularRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!PopularRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:49'!returnRetrieveQuestions: aUser	^ cuoora popularToday! !QuestionRetriever subclass: #SocialRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!SocialRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:48'!returnRetrieveQuestions: aUser	^ aUser followingQuestions ! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Topic methodsFor: 'accessing'!description	^ description! !!Topic methodsFor: 'accessing'!addQuestion: aQuetion	questions add: aQuetion ! !!Topic methodsFor: 'accessing'!name	^name! !!Topic methodsFor: 'accessing'!questions	^ questions! !!Topic methodsFor: 'intance creation' stamp: 'AlejoPugliese 5/4/2021 21:01'!name: aName description: aDescription	questions := OrderedCollection new.	name:= aName.	description := aDescription.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'intance creation' stamp: 'AlejoPugliese 5/4/2021 21:00'!name: aName description: aDescription	^ self new		name: aName description: aDescription! !QuestionRetriever subclass: #TopicsRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!TopicsRetriever methodsFor: 'retrieving' stamp: 'AlejoPugliese 5/31/2021 10:49'!returnRetrieveQuestions: aUser	^ aUser topicsQuestions! !Object subclass: #User	instanceVariableNames: 'questions answers username password topics following votes questionRetriever'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!User methodsFor: 'instance-creation' stamp: 'AlejoPugliese 5/17/2021 23:49'!username: aUsername password: aPassword questionRetriever: aQuestionRetriever	username := aUsername.	password := aPassword.	self initialize.	^ self! !!User methodsFor: 'instance-creation' stamp: 'AlejoPugliese 5/4/2021 21:10'!initializetopics := OrderedCollection new.	questions := OrderedCollection new.	following := OrderedCollection new.	votes := OrderedCollection new.! !!User methodsFor: 'accessing'!username	^ username! !!User methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 12:55'!questions	^ questions! !!User methodsFor: 'accessing'!votes	^ votes! !!User methodsFor: 'accessing' stamp: 'AlejoPugliese 5/4/2021 12:57'!answers^answers! !!User methodsFor: 'accessing'!following	^ following! !!User methodsFor: 'accessing'!topics	^ topics! !!User methodsFor: 'accessing'!password	^ password! !!User methodsFor: 'accessing array' stamp: 'AlejoPugliese 5/4/2021 22:08'!followingQuestions	^ following flatCollect: [ :follow | follow questions ]! !!User methodsFor: 'accessing array' stamp: 'AlejoPugliese 5/30/2021 16:27'!topicsQuestions	^ topics flatCollect: [ :topic | topic questions ]	! !!User methodsFor: 'accessing array' stamp: 'AlejoPugliese 5/13/2021 23:37'!questionsOfInterest	^ questionRetriever retrieveQuestions: self! !!User methodsFor: 'adding'!addTopic: aTopic	topics add: aTopic ! !!User methodsFor: 'adding' stamp: 'AlejoPugliese 5/4/2021 12:56'!addQuestion: anObject	questions add: anObject! !!User methodsFor: 'adding' stamp: 'AlejoPugliese 5/4/2021 12:57'!addAnswer: anAnswer	answers add: anAnswer ! !!User methodsFor: 'adding'!addVote: aVote	votes add: aVote! !!User methodsFor: 'adding' stamp: 'AlejoPugliese 5/4/2021 21:08'!follow: aUser	following add: aUser ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance-creation' stamp: 'AlejoPugliese 5/17/2021 23:50'!username: aUsername password: aPassword questionRetriever: aQuestionRetriever	^ self new username: aUsername password: aPassword questionRetriever: aQuestionRetriever! !Object subclass: #Vote	instanceVariableNames: 'isLike timstamp publication user'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Vote methodsFor: 'accessing'!isLike	^ isLike! !!Vote methodsFor: 'accessing'!user	^ user! !!Vote methodsFor: 'accessing'!publication	^ publication! !!Vote methodsFor: 'private'!dislike	isLike := false.! !!Vote methodsFor: 'private'!like	isLike := true.! !!Vote methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/4/2021 21:06'!user: aUser publication: aPublication	user := aUser.	publication := aPublication.	timstamp := DateAndTime now.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vote class	instanceVariableNames: ''!!Vote class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/4/2021 21:06'!user: aUser likesPublication: aPublication	^ self new		user: aUser publication: aPublication;like;		yourself! !!Vote class methodsFor: 'instance creation' stamp: 'AlejoPugliese 5/4/2021 21:06'!user: aUser dislikesPublication: aPublication	^ self new		user: aUser publication: aPublication;		dislike;		yourself! !